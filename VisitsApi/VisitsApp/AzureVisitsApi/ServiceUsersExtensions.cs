// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using VisitsApp;
using VisitsApp.Models;

namespace VisitsApp
{
    public static partial class ServiceUsersExtensions
    {
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ServiceUser DeleteServiceUser(this IServiceUsers operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUsers)s).DeleteServiceUserAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ServiceUser> DeleteServiceUserAsync(this IServiceUsers operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<VisitsApp.Models.ServiceUser> result = await operations.DeleteServiceUserWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ServiceUser GetServiceUser(this IServiceUsers operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUsers)s).GetServiceUserAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ServiceUser> GetServiceUserAsync(this IServiceUsers operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<VisitsApp.Models.ServiceUser> result = await operations.GetServiceUserWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        public static IList<ServiceUser> GetServiceUsers(this IServiceUsers operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUsers)s).GetServiceUsersAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ServiceUser>> GetServiceUsersAsync(this IServiceUsers operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<VisitsApp.Models.ServiceUser>> result = await operations.GetServiceUsersWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        /// <param name='serviceUser'>
        /// Required.
        /// </param>
        public static ServiceUser PostServiceUser(this IServiceUsers operations, ServiceUser serviceUser)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUsers)s).PostServiceUserAsync(serviceUser);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        /// <param name='serviceUser'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ServiceUser> PostServiceUserAsync(this IServiceUsers operations, ServiceUser serviceUser, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<VisitsApp.Models.ServiceUser> result = await operations.PostServiceUserWithOperationResponseAsync(serviceUser, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='serviceUser'>
        /// Required.
        /// </param>
        public static object PutServiceUser(this IServiceUsers operations, int id, ServiceUser serviceUser)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUsers)s).PutServiceUserAsync(id, serviceUser);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUsers.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='serviceUser'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutServiceUserAsync(this IServiceUsers operations, int id, ServiceUser serviceUser, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutServiceUserWithOperationResponseAsync(id, serviceUser, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
