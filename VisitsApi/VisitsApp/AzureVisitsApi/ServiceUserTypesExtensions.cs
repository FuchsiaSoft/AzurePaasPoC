// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using VisitsApp;
using VisitsApp.Models;

namespace VisitsApp
{
    public static partial class ServiceUserTypesExtensions
    {
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ServiceUserType DeleteServiceUserType(this IServiceUserTypes operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUserTypes)s).DeleteServiceUserTypeAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ServiceUserType> DeleteServiceUserTypeAsync(this IServiceUserTypes operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<VisitsApp.Models.ServiceUserType> result = await operations.DeleteServiceUserTypeWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ServiceUserType GetServiceUserType(this IServiceUserTypes operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUserTypes)s).GetServiceUserTypeAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ServiceUserType> GetServiceUserTypeAsync(this IServiceUserTypes operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<VisitsApp.Models.ServiceUserType> result = await operations.GetServiceUserTypeWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        public static IList<ServiceUserType> GetServiceUserTypes(this IServiceUserTypes operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUserTypes)s).GetServiceUserTypesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ServiceUserType>> GetServiceUserTypesAsync(this IServiceUserTypes operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<VisitsApp.Models.ServiceUserType>> result = await operations.GetServiceUserTypesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        /// <param name='serviceUserType'>
        /// Required.
        /// </param>
        public static ServiceUserType PostServiceUserType(this IServiceUserTypes operations, ServiceUserType serviceUserType)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUserTypes)s).PostServiceUserTypeAsync(serviceUserType);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        /// <param name='serviceUserType'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ServiceUserType> PostServiceUserTypeAsync(this IServiceUserTypes operations, ServiceUserType serviceUserType, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<VisitsApp.Models.ServiceUserType> result = await operations.PostServiceUserTypeWithOperationResponseAsync(serviceUserType, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='serviceUserType'>
        /// Required.
        /// </param>
        public static object PutServiceUserType(this IServiceUserTypes operations, int id, ServiceUserType serviceUserType)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IServiceUserTypes)s).PutServiceUserTypeAsync(id, serviceUserType);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the VisitsApp.IServiceUserTypes.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='serviceUserType'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutServiceUserTypeAsync(this IServiceUserTypes operations, int id, ServiceUserType serviceUserType, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutServiceUserTypeWithOperationResponseAsync(id, serviceUserType, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
