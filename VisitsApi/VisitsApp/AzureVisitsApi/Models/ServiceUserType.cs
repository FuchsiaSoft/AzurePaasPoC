// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;
using VisitsApp.Models;

namespace VisitsApp.Models
{
    public partial class ServiceUserType
    {
        private int? _id;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private IList<QuickText> _quickTexts;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<QuickText> QuickTexts
        {
            get { return this._quickTexts; }
            set { this._quickTexts = value; }
        }
        
        private IList<ServiceUser> _serviceUsers;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<ServiceUser> ServiceUsers
        {
            get { return this._serviceUsers; }
            set { this._serviceUsers = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServiceUserType class.
        /// </summary>
        public ServiceUserType()
        {
            this.QuickTexts = new LazyList<QuickText>();
            this.ServiceUsers = new LazyList<ServiceUser>();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken idValue = inputObject["Id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.Id = ((int)idValue);
                }
                JToken nameValue = inputObject["Name"];
                if (nameValue != null && nameValue.Type != JTokenType.Null)
                {
                    this.Name = ((string)nameValue);
                }
                JToken quickTextsSequence = ((JToken)inputObject["QuickTexts"]);
                if (quickTextsSequence != null && quickTextsSequence.Type != JTokenType.Null)
                {
                    foreach (JToken quickTextsValue in ((JArray)quickTextsSequence))
                    {
                        QuickText quickText = new QuickText();
                        quickText.DeserializeJson(quickTextsValue);
                        this.QuickTexts.Add(quickText);
                    }
                }
                JToken serviceUsersSequence = ((JToken)inputObject["ServiceUsers"]);
                if (serviceUsersSequence != null && serviceUsersSequence.Type != JTokenType.Null)
                {
                    foreach (JToken serviceUsersValue in ((JArray)serviceUsersSequence))
                    {
                        ServiceUser serviceUser = new ServiceUser();
                        serviceUser.DeserializeJson(serviceUsersValue);
                        this.ServiceUsers.Add(serviceUser);
                    }
                }
            }
        }
        
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type ServiceUserType
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (this.Id != null)
            {
                outputObject["Id"] = this.Id.Value;
            }
            if (this.Name != null)
            {
                outputObject["Name"] = this.Name;
            }
            JArray quickTextsSequence = null;
            if (this.QuickTexts != null)
            {
                if (this.QuickTexts is ILazyCollection<QuickText> == false || ((ILazyCollection<QuickText>)this.QuickTexts).IsInitialized)
                {
                    quickTextsSequence = new JArray();
                    outputObject["QuickTexts"] = quickTextsSequence;
                    foreach (QuickText quickTextsItem in this.QuickTexts)
                    {
                        if (quickTextsItem != null)
                        {
                            quickTextsSequence.Add(quickTextsItem.SerializeJson(null));
                        }
                    }
                }
            }
            JArray serviceUsersSequence = null;
            if (this.ServiceUsers != null)
            {
                if (this.ServiceUsers is ILazyCollection<ServiceUser> == false || ((ILazyCollection<ServiceUser>)this.ServiceUsers).IsInitialized)
                {
                    serviceUsersSequence = new JArray();
                    outputObject["ServiceUsers"] = serviceUsersSequence;
                    foreach (ServiceUser serviceUsersItem in this.ServiceUsers)
                    {
                        if (serviceUsersItem != null)
                        {
                            serviceUsersSequence.Add(serviceUsersItem.SerializeJson(null));
                        }
                    }
                }
            }
            return outputObject;
        }
    }
}
